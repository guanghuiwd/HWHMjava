多态！：
对象的不同形态。
多态前提和体现：有继承和实现关系，方法重写，父类引用指向子类对象 animal a = new cat（）； /向上转型 是多态的形式
对父类引用指向子类：成员变量：编译和执行都看左边（父类） 成员方法：编译看左边，执行看右边。
传给父亲简化了方法的编写
多态提高了程序的扩展性，定义方法用父类，使用方法用子类。但多态不能访问子态独有的方法，但又有多态转型
多态，向下转型：  Cat c1 = (Cat)c;
抽象类：public abstract class Animal {public abstract void eat();}
抽象类如何创建对象：抽象类实例化，参照多态的方式，通过对子态对象实例化，抽象类多态
抽象类子类：1、重写所有的抽象类中所有方法 2、还是抽象类     加final 就是‘常量’了。
抽象类成员特点：成员变量 可 /构造方法 可（用于子类访问父类的初始化） 抽象类本身不能实例化！//即没法new一个
/成员方法 可：抽象成员方法，限定子类必须去做什么事情。 非抽象成员方法复用用
P178
