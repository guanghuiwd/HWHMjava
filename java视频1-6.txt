多态！：
对象的不同形态。
多态前提和体现：有继承和实现关系，方法重写，父类引用指向子类对象 animal a = new cat（）； /向上转型 是多态的形式
对父类引用指向子类：成员变量：编译和执行都看左边（父类） 成员方法：编译看左边，执行看右边。
传给父亲简化了方法的编写
多态提高了程序的扩展性，定义方法用父类，使用方法用子类。但多态不能访问子态独有的方法，但又有多态转型
多态，向下转型：  Cat c1 = (Cat)c;
抽象类：public abstract class Animal {public abstract void eat();}
抽象类如何创建对象：抽象类实例化，参照多态的方式，通过对子态对象实例化，抽象类多态
抽象类子类：1、重写所有的抽象类中所有方法 2、还是抽象类     加final 就是‘常量’了。
抽象类成员特点：成员变量 可 /构造方法 可（用于子类访问父类的初始化） 抽象类本身不能实例化！//即没法new一个
/成员方法 可：抽象成员方法，限定子类必须去做什么事情。 非抽象成员方法复用用
接口：
接口就是公共的规范。java接口是对行为的抽象。类实现接口用implement
接口不能实例化，用多态方式用类对象实例化。（插入：一般用多态就是：抽象类多态和接口多态）
接口的成员特点：接口名+impl后缀 一般表示实现类
成员变量 /默认被final修饰，还默认被public static修饰 public static final int num = 10;
构造方法 /没有 （所有的类的默认父类就是class Object） public class InterImpl extends Object implements Inter{}（深层因为接口是对行为进行抽象，没有具体存在）
成员方法 /只能是抽象的，public abstract void jump();
我们有接口出现，有抽象类出现。但我们使用是用具体的子类，叫实现类
类和接口：互相一对多。接口之间：单继承和多继承 （类之间只能单继承）
抽象类和接口设计层面的区别：抽象类就是对类（对对象对事物抽象）包括属性与行为 / 接口对行为抽象
父类的父类的抽象成员方法也是需要重写的，抽象是重点
抽象类名做形参和返回值：形参是是抽象类名，其实需要的是子类对象 / 返回值是抽象类名，时间返回抽象类的实现子类
接口名做形参和返回值：形参和返回值都是实现了实现类对象。
（私以为：解决了变量的类型和new的类型不一致的原因）
内部类：类中类。如：电脑中处理器
首先，类中不能直接输出语句sout的，必须是类中用方法可以输出
内部可访问外部私有，外部访问内部必须要new一个新内部类，（这种都是引用对象，就是类一个新地址 Jumpping j = new Cat(); j是地址，是引用变量
成员内部类：public时：Outer.Inner oi = new Outer().new Inner();但内部类一般私用，在外部类中方法调用内部类方法 （了解即可
